{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypePrettyCode from 'rehype-pretty-code'\nimport rehypeSlug from 'rehype-slug'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport remarkGfm from 'remark-gfm'\n\nconst ExecutiveSummaryDef = {\n  title: { type: 'string', required: true },\n  description: { type: 'string', required: true },\n}\n\nconst ChallengeDef = {\n  title: { type: 'string', required: true },\n  description: { type: 'string', required: true },\n  beforeState: { type: 'string', required: false },\n  icon: { type: 'string', required: false },\n}\n\nconst SolutionDef = {\n  title: { type: 'string', required: true },\n  description: { type: 'string', required: true },\n  icon: { type: 'string', required: false },\n}\n\nconst TechnologyDef = {\n  name: { type: 'string', required: true },\n  icon: { type: 'string', required: false },\n}\n\nconst ProcessStepDef = {\n  title: { type: 'string', required: true },\n  description: { type: 'string', required: true },\n  outcomeText: { type: 'string', required: false },\n  icon: { type: 'string', required: false },\n}\n\nconst OutcomeDef = {\n  title: { type: 'string', required: true },\n  value: { type: 'string', required: true },\n  description: { type: 'string', required: false },\n}\n\nconst TestimonialDef = {\n  name: { type: 'string', required: true },\n  role: { type: 'string', required: true },\n  company: { type: 'string', required: true },\n  image: { type: 'string', required: true },\n  quote: { type: 'string', required: true },\n}\n\nconst RelatedCaseStudyDef = {\n  title: { type: 'string', required: true },\n  description: { type: 'string', required: true },\n  image: { type: 'string', required: true },\n  slug: { type: 'string', required: true },\n}\n\nconst MiniTestimonialDef = {\n  name: { type: 'string', required: true },\n  role: { type: 'string', required: true },\n  quote: { type: 'string', required: true },\n}\n\nexport const Project = defineDocumentType(() => ({\n  name: 'Project',\n  filePathPattern: `{projects,case-studies}/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    subtitle: {\n      type: 'string',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      required: true,\n    },\n    tagline: {\n      type: 'string',\n      required: true,\n    },\n    clientName: {\n      type: 'string',\n      required: true,\n    },\n    industry: {\n      type: 'string',\n      required: true,\n    },\n    timeframe: {\n      type: 'string',\n      required: true,\n    },\n    heroImage: {\n      type: 'string',\n      required: true,\n    },\n    logoImage: {\n      type: 'string',\n      required: false,\n    },\n    liveUrl: {\n      type: 'string',\n      required: true,\n    },\n    executiveSummary: {\n      type: 'list',\n      of: {\n        type: 'json',\n        options: {\n          title: { type: 'string', required: true },\n          description: { type: 'string', required: true },\n        },\n      },\n      required: true,\n    },\n    clientDescription: {\n      type: 'string',\n      required: true,\n    },\n    challenges: {\n      type: 'list',\n      of: {\n        type: 'json',\n        options: {\n          title: { type: 'string', required: true },\n          description: { type: 'string', required: true },\n          beforeState: { type: 'string', required: false },\n          icon: { type: 'string', required: false },\n        },\n      },\n      required: true,\n    },\n    approach: {\n      type: 'string',\n      required: true,\n    },\n    solutions: {\n      type: 'list',\n      of: {\n        type: 'json',\n        options: {\n          title: { type: 'string', required: true },\n          description: { type: 'string', required: true },\n          icon: { type: 'string', required: false },\n        },\n      },\n      required: true,\n    },\n    technologies: {\n      type: 'list',\n      of: {\n        type: 'json',\n        options: {\n          name: { type: 'string', required: true },\n          icon: { type: 'string', required: false },\n        },\n      },\n      required: true,\n    },\n    process: {\n      type: 'list',\n      of: {\n        type: 'json',\n        options: {\n          title: { type: 'string', required: true },\n          description: { type: 'string', required: true },\n          outcomeText: { type: 'string', required: false },\n          icon: { type: 'string', required: false },\n        },\n      },\n      required: true,\n    },\n    outcomes: {\n      type: 'list',\n      of: {\n        type: 'json',\n        options: {\n          title: { type: 'string', required: true },\n          value: { type: 'string', required: true },\n          description: { type: 'string', required: false },\n        },\n      },\n      required: true,\n    },\n    keyTakeaways: {\n      type: 'list',\n      of: { type: 'string' },\n      required: true,\n    },\n    galleryImages: {\n      type: 'list',\n      of: { type: 'string' },\n      required: true,\n    },\n    testimonial: {\n      type: 'json',\n      options: {\n        quote: { type: 'string', required: true },\n        author: { type: 'string', required: true },\n        position: { type: 'string', required: true },\n        company: { type: 'string', required: true },\n        avatar: { type: 'string', required: true },\n      },\n      required: true,\n    },\n  },\n  computedFields: {\n    type: {\n      type: 'string',\n      resolve: () => 'Project',\n    },\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n    },\n    url: {\n      type: 'string',\n      resolve: (doc) => `/projects/${doc._raw.sourceFileName.replace(/\\.mdx$/, '')}`,\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Project],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode as any,\n        {\n          theme: 'github-dark',\n          onVisitLine(node: any) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: 'text', value: ' ' }]\n            }\n          },\n          onVisitHighlightedLine(node: any) {\n            node.properties.className.push('line--highlighted')\n          },\n          onVisitHighlightedWord(node: any) {\n            node.properties.className = ['word--highlighted']\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['anchor'],\n          },\n        },\n      ],\n    ],\n  },\n}) "],
  "mappings": "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",
  "names": []
}
